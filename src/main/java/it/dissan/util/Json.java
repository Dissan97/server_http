
package it.dissan.util;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.*;
import org.jetbrains.annotations.NotNull;

public class Json {

    /**
     * objectManager used to parse all json: -> [value]; value: -> json [Node]
     */
    private static ObjectMapper objectMapper = defaultObjectMapper();

    /**
     * creating an object mapper static method @classMethod
     * @return type: ObjectMapper
     */

    private static @NotNull ObjectMapper defaultObjectMapper(){
        ObjectMapper oM = new ObjectMapper();
        oM.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        return oM;
    }

    /**
     * Parsing a json file
     * @param jsonSrc
     * @return
     */

    public static JsonNode parse(String jsonSrc) throws JsonProcessingException {
        return objectMapper.readTree(jsonSrc);
    }

    /**
     * Processing the data
     * @param node
     * @param clazz
     * @return
     * @param <A>
     * @throws JsonProcessingException
     */

    public static <A> A fromJson(JsonNode node, Class<A> clazz) throws JsonProcessingException {
        return objectMapper.treeToValue(node, clazz);
    }

    /**
     * Creating a json node value from a given obj
     * @param obj
     * @throws JsonProcessingException
     * @return
     */

    public static JsonNode toJson(Object obj){
        return objectMapper.valueToTree(obj);
    }

    /**
     * Getting raw String value from json Node -> [String]
     */

    public static String stringify(JsonNode node) throws JsonProcessingException {
        return generateJson(node, false);
    }

    /**
     * Getting string value of a json file serialize
     * @param node passing a json node to have a String
     * @return returning a string of generated json Node
     */

    public static String stringifyPretty(JsonNode node) throws JsonProcessingException {
        return generateJson(node, true);
    }

    /**
     * @param obj passing any object that will be parsed
     * @param pretty to use serializable if true
     * @return return a String generated by a json
     * @throws JsonProcessingException throwing exception if is detected
     */

    public static String generateJson(Object obj, boolean pretty) throws JsonProcessingException {
        ObjectWriter objectWriter = objectMapper.writer();
        if (pretty){
            objectWriter = objectWriter.with(SerializationFeature.INDENT_OUTPUT);
        }
        return objectWriter.writeValueAsString(obj);
    }
}
